name: CI/CD Pipeline

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main]
    release:
        types: [published]

env:
    PYTHON_VERSION: "3.9"
    DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
    DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
    DATABRICKS_HTTP_PATH: ${{ secrets.DATABRICKS_HTTP_PATH }}

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install flake8 black isort
            - name: Lint with flake8
              run: |
                  flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
                  flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
            - name: Check formatting with black
              run: black --check --diff .
            - name: Check imports with isort
              run: isort --check-only --diff .

    test:
        runs-on: ubuntu-latest
        needs: lint
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install pytest pytest-cov pytest-xdist
            - name: Run tests
              run: |
                  pytest --cov=. --cov-report=xml --cov-report=term-missing --maxfail=5 -x
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: codecov-umbrella

    security-scan:
        runs-on: ubuntu-latest
        needs: test
        steps:
            - uses: actions/checkout@v4
            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}
            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install bandit safety
            - name: Run Bandit security scan
              run: |
                  bandit -r . -f json -o bandit-report.json || true
                  bandit -r . --exit-zero
            - name: Run Safety dependency scan
              run: |
                  safety check --output json > safety-report.json || true
                  safety check
            - name: Upload security reports
              uses: actions/upload-artifact@v3
              with:
                  name: security-reports
                  path: |
                      bandit-report.json
                      safety-report.json

    build:
        runs-on: ubuntu-latest
        needs: security-scan
        steps:
            - uses: actions/checkout@v4
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}
            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ secrets.DOCKER_REGISTRY }}/global-electronics-dashboard
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=semver,pattern={{version}}
                      type=semver,pattern={{major}}.{{minor}}
            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max

    load-test:
        runs-on: ubuntu-latest
        needs: build
        steps:
            - uses: actions/checkout@v4

            - name: Log in to Docker registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ secrets.DOCKER_REGISTRY }}
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Pull and run Streamlit container
              run: |
                  docker pull ${{ secrets.DOCKER_REGISTRY }}/global-electronics-dashboard:${{ github.sha }}
                  docker run -d --name streamlit_test -p 8501:8501 \
                    -e DATABRICKS_HOST="${{ secrets.DATABRICKS_HOST }}" \
                    -e DATABRICKS_TOKEN="${{ secrets.DATABRICKS_TOKEN }}" \
                    -e DATABRICKS_HTTP_PATH="${{ secrets.DATABRICKS_HTTP_PATH }}" \
                    ${{ secrets.DOCKER_REGISTRY }}/global-electronics-dashboard:${{ github.sha }}

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Locust
              run: pip install locust

            - name: Wait for Streamlit to be ready
              run: |
                  timeout 300 bash -c 'until curl -f http://localhost:8501 > /dev/null 2>&1; do sleep 5; done'

            - name: Run load test
              run: |
                  locust --headless --users 50 --spawn-rate 5 --run-time 2m --host http://localhost:8501 -f load_tests/locustfile.py --html report.html

            - name: Upload load test report
              uses: actions/upload-artifact@v3
              with:
                  name: load-test-report
                  path: report.html

            - name: Check performance thresholds
              run: |
                  # Extract metrics from report.html and check against thresholds
                  python load_tests/check_thresholds.py report.html

            - name: Stop and remove Streamlit container
              if: always()
              run: |
                  docker stop streamlit_test || true
                  docker rm streamlit_test || true

    deploy-dev:
        runs-on: ubuntu-latest
        needs: load-test
        if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
        environment: development
        steps:
            - name: Deploy to Development
              run: |
                  echo "Deploying to development environment"
                  # Add deployment commands here (e.g., kubectl, docker-compose, etc.)
                  # For now, just log the deployment
                  echo "Deployment completed for commit ${{ github.sha }}"

    deploy-prod:
        runs-on: ubuntu-latest
        needs: load-test
        if: github.event_name == 'release'
        environment: production
        steps:
            - name: Deploy to Production
              run: |
                  echo "Deploying to production environment"
                  # Add production deployment commands here
                  echo "Production deployment completed for release ${{ github.event.release.tag_name }}"
